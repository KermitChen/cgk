<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.2.xsd
           http://www.springframework.org/schema/util 
           http://www.springframework.org/schema/util/spring-util-4.1.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
           http://www.directwebremoting.org/schema/spring-dwr    
       	   http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd 
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

    <context:component-scan base-package="com.dyst.*"/>
    
	<!-- 配置文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:config/jdbc.properties</value>
		</property>
	</bean>
	
	<!-- 使用c3p0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
	    destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		
		<!-- 初始化连接池最大连接数 -->
		<property name="initialPoolSize">
			<value>5</value>
		</property>
		<!-- 数据库连接池最小连接数 -->
		<property name="minPoolSize">
	        <value>5</value>	
		</property>
		<!-- 数据库连接池最大连接数 -->
		<property name="maxPoolSize">
		    <value>100</value>
		</property>
		<!-- 最大空闲时间，60秒内未使用，则链接将被丢弃，若为0，则永不丢弃。default：0 -->
		<property name="maxIdleTime">
			<value>60</value> 
		</property>
		<!-- 当连接池中的链接耗尽的时候，c3p0一次同时获取的链接数 -->
		<property name="acquireIncrement">
			<value>10</value> 
		</property>
		<!-- 每60秒检查所有连接池中的空闲连接-->
		<property name="idleConnectionTestPeriod">
			<value>60</value> 
		</property>
		<!-- 定义在从数据库获取连接失败后重复尝试的次数-->
		<property name="acquireRetryAttempts">
			<value>30</value> 
		</property>
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留
		 并在下次调用getconnection的时候继续尝试获取连接。如果设置为true，那么在尝试获取连接失败后该数据源
		 将申明已断开并永久关闭。default：true -->
		<property name="breakAfterAcquireFailure">
			<value>false</value> 
		</property>
		<!-- 两次链接中间隔时间，单位：毫秒   default ：1000 -->
		<property name="acquireRetryDelay">
			<value>1000</value> 
		</property>
		<!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 
　　                                  通过多线程实现多个操作同时被执行。Default: 5-->
		<property name="numHelperThreads">
			<value>5</value> 
		</property>
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.dyst.*.entities</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				
				<!-- 开启二级缓存 -->  
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <!-- 启用查询缓存 -->  
                <prop key="hibernate.cache.use_query_cache">true</prop>  
                <!-- 启用ehcache缓存框架 --> 
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<!-- 缓存文件的位置 -->
				<prop key="hibernate.net.sf.ehcache.configurationResourceName">classpath:config/ehcache.xml</prop>
				
			</props>
		</property>
	</bean>
	
	<!-- 模板 -->
<!--	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">-->
<!--		<property name="sessionFactory" ref="sessionFactory"></property>-->
<!--	</bean>-->
	
	<!-- 事务管理-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>			
			<tx:method name="add*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="save*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="update*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="bussinessService"	expression="execution(public * com.*.*.*(..))" />
		<aop:advisor pointcut-ref="bussinessService" advice-ref="txAdvice"/>
	</aop:config>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!--加载activiti引擎  -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration"/>
	</bean> 
	<!--dataSource为自己已经定义好的数据源，txManager为自己已经定义好的事务管理器  -->
 	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseSchemaUpdate" value="true" />
		<property name="jobExecutorActivate" value="true" />
		<property name="dbIdentityUsed" value="false"/>
		<property name="activityFontName" value="宋体"/>
	</bean> 
	<!--activiti的各种服务接口  -->
 	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/> 
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
	<util:properties id="APP_PROPERTIES" location="classpath:config/activiti.properties" local-override="true"/>
	
	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->  
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="maxUploadSize" value="10485760" />  
	</bean>
	
	<!-- ===================================定时器开始========================================================   -->
	<!-- 布控定时器开始 -->
	<bean id="quartzUpdateDis" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="quartzDispatched" />
        <property name="targetMethod" value="updateDispatched" />
        <property name="concurrent" value="false" />
    </bean>
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="quartzUpdateDis"/>
		<!-- 每天00:01运行一次 -->
	    <property name="cronExpression" value="0 2 0 * * ?" />
	</bean>
	<!-- 布控定时器截止 -->
	
	<!-- 公告定时刷新任务  定时器 -->
	<bean id="annJobDetial" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 设置执行对象 （service）-->
        <property name="targetObject" ref="sysAnnService" />
        <!-- 设置执行对象中的方法 -->
        <property name="targetMethod" value="countUsersHasReadAnn" />
        <!-- 设置是否并发执行 -->
        <property name="concurrent" value="false" />	
	</bean>
		<!-- 制定此任务执行的时机 -->
	<bean id="annCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!--指明执行此触发器的具体任务 -->
		<property name="jobDetail" ref="annJobDetial"/>
		<!-- 此任务执行的时间点，每15秒执行一次（暂定） -->
		<property name="cronExpression" value="50 * * ? * *"></property>
	</bean>
	<!-- 订阅到期失效   定时器 -->
	<bean id="dyIsNotAvailableJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="dysqService"/>
		<property name="targetMethod" value="updateDyStateByQuartz"/>
		<property name="concurrent" value="false" />
	</bean>
		<!-- 指定此任务执行的时机 -->
	<bean id="dyIsNotAvailableCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!--指明执行此触发器的具体任务 -->
		<property name="jobDetail" ref="dyIsNotAvailableJobDetail"/>
		<!-- 此任务执行的时间点，每30秒执行一次（暂定） 020-->
		<property name="cronExpression" value="0 2 0 * * ?"></property>
	</bean>
	<!-- 设置调度工厂 -->
	<bean id="complainSchedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="annCronTrigger"/>
				<ref bean="dyIsNotAvailableCronTrigger"/>
			</list>
		</property>
	</bean>
	
	<!-- 动态勤务定时器开始 -->
	<bean id="quartzUpdateDynamicService" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="quartzDynamicService"/>
        <property name="targetMethod" value="updateDynamicService"/>
        <property name="concurrent" value="false" />
    </bean>
	<bean id="dynamicServiceTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="quartzUpdateDynamicService"/>
		<!-- 运行时间 -->
	    <property name="cronExpression" value="0 0/${quartz.repeatInterval.dynamicService} * * * ?"/>
	</bean>
	<!-- 动态勤务定时器截止 -->
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobDetails">  
	        <list>  
	            <ref bean="quartzUpdateDis"/>
	            <ref bean="quartzUpdateDynamicService"/>
	        </list>  
	    </property>  
	    <property name="triggers">
	        <list>
	            <ref bean="cronTrigger"/>
	            <ref bean="dynamicServiceTrigger"/>
	        </list>
	    </property>
	    <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
	</bean>
	<!-- ===================================定时器截止========================================================   -->
</beans>